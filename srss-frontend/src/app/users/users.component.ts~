import {Component, OnDestroy, OnInit} from '@angular/core';
import {Title} from '@angular/platform-browser';
import {forkJoin, map, Observable, of, Subscription, switchMap} from 'rxjs';
import {RefreshService} from '../services/refresh.service';
import {FullUser} from '../dto/FullUser';
import {UserService} from '../services/user.service';
import {User} from '../dto/User';
import {error} from '@angular/compiler-cli/src/transformers/util';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styleUrls: ['./users.component.css']
})
export class UsersComponent implements OnInit, OnDestroy {
  private sub: Subscription = new Subscription();
  currentUser$: Observable<FullUser | null> = this.userService.user$;

  users: FullUser[] = [];
  scores: { [uuid: string]: Observable<number> } = {};

  constructor(
    private refreshService: RefreshService,
    private titleService: Title,
    private userService: UserService
  ) {
  }

  ngOnInit(): void {
    this.titleService.setTitle('Пользователи');
    this.loadData();

    this.sub.add(
      this.refreshService.refresh$.subscribe(() => this.loadData())
    );
  }

  ngOnDestroy(): void {
    this.sub.unsubscribe();
  }

  private loadData(): void {
    this.userService.getAllUsers()
      .pipe(
        switchMap((users: FullUser[]) => {
          // Сохраняем первоначальный массив пользователей
          const originalUsers = users.slice();

          // Для каждого пользователя формируем запрос балла
          const scoreObservables = originalUsers.map(user =>
            this.userService.calculateUserScore(user.uuid)
          );

          // Ждём, пока все запросы вернут число, и объединяем их с пользователями
          return forkJoin(scoreObservables).pipe(
            map((scoresArray: number[]) => {
              return originalUsers.map((user, index) => ({
                user,
                score: scoresArray[index]
              }));
            })
          );
        })
      )
      .subscribe({
        next: (paired: { user: FullUser; score: number }[]) => {
          // Сортируем по score по убыванию (большие баллы первыми)
          paired.sort((a, b) => b.score - a.score);

          // Перезаписываем this.users уже отсортированным списком
          this.users = paired.map(p => p.user);

          // Заполняем this.scores, чтобы async-pipe в шаблоне смог показать число
          this.scores = {};
          paired.forEach(p => {
            this.scores[p.user.uuid] = of(p.score);
          });
        },
        error: err => {
          console.error(err);
        }
      });
  }
}
